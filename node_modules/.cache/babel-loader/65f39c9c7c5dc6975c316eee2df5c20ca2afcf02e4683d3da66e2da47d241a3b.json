{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'corr';\nvar dependencies = ['typed', 'matrix', 'mean', 'sqrt', 'sum', 'add', 'subtract', 'multiply', 'pow', 'divide'];\nexport var createCorr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sqrt,\n    sum,\n    add,\n    subtract,\n    multiply,\n    pow,\n    divide\n  } = _ref;\n  /**\n   * Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.\n   *\n   * Syntax:\n   *\n   *     math.corr(A, B)\n   *\n   * Examples:\n   *\n   *     math.corr([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])     // returns 1\n   *     math.corr([1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8])     // returns 0.9569941688503644\n   *     math.corr(math.matrix([[1, 2.2, 3, 4.8, 5], [1, 2, 3, 4, 5]]), math.matrix([[4, 5.3, 6.6, 7, 8], [1, 2, 3, 4, 5]])) // returns DenseMatrix [0.9569941688503644, 1]\n   *\n   * See also:\n   *\n   *     median, mean, min, max, sum, prod, std, variance\n   *\n   * @param {Array | Matrix} A The first array or matrix to compute correlation coefficient\n   * @param {Array | Matrix} B The second array or matrix to compute correlation coefficient\n   * @return {*} The correlation coefficient\n   */\n  return typed(name, {\n    'Array, Array': function ArrayArray(A, B) {\n      return _corr(A, B);\n    },\n    'Matrix, Matrix': function MatrixMatrix(xMatrix, yMatrix) {\n      return matrix(_corr(xMatrix.toArray(), yMatrix.toArray()));\n    }\n  });\n  /**\n   * Calculate the correlation coefficient between two arrays or matrices.\n   * @param {Array | Matrix} A\n   * @param {Array | Matrix} B\n   * @return {*} correlation coefficient\n   * @private\n   */\n  function _corr(A, B) {\n    if (Array.isArray(A[0]) && Array.isArray(B[0])) {\n      var correlations = [];\n      for (var i = 0; i < A.length; i++) {\n        correlations.push(correlation(A[i], B[i]));\n      }\n      return correlations;\n    } else {\n      return correlation(A, B);\n    }\n  }\n  function correlation(A, B) {\n    var n = A.length;\n    var sumX = sum(A);\n    var sumY = sum(B);\n    var sumXY = A.reduce((acc, x, index) => add(acc, multiply(x, B[index])), 0);\n    var sumXSquare = sum(A.map(x => pow(x, 2)));\n    var sumYSquare = sum(B.map(y => pow(y, 2)));\n    var numerator = subtract(multiply(n, sumXY), multiply(sumX, sumY));\n    var denominator = sqrt(multiply(subtract(multiply(n, sumXSquare), pow(sumX, 2)), subtract(multiply(n, sumYSquare), pow(sumY, 2))));\n    return divide(numerator, denominator);\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createCorr","_ref","typed","matrix","sqrt","sum","add","subtract","multiply","pow","divide","ArrayArray","A","B","_corr","MatrixMatrix","xMatrix","yMatrix","toArray","Array","isArray","correlations","i","length","push","correlation","n","sumX","sumY","sumXY","reduce","acc","x","index","sumXSquare","map","sumYSquare","y","numerator","denominator"],"sources":["/Users/raulmejia/Documents/Development-Projects/Web Development/Proyectos React/calculadora-react/node_modules/mathjs/lib/esm/function/statistics/corr.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'corr';\nvar dependencies = ['typed', 'matrix', 'mean', 'sqrt', 'sum', 'add', 'subtract', 'multiply', 'pow', 'divide'];\nexport var createCorr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sqrt,\n    sum,\n    add,\n    subtract,\n    multiply,\n    pow,\n    divide\n  } = _ref;\n  /**\n   * Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.\n   *\n   * Syntax:\n   *\n   *     math.corr(A, B)\n   *\n   * Examples:\n   *\n   *     math.corr([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])     // returns 1\n   *     math.corr([1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8])     // returns 0.9569941688503644\n   *     math.corr(math.matrix([[1, 2.2, 3, 4.8, 5], [1, 2, 3, 4, 5]]), math.matrix([[4, 5.3, 6.6, 7, 8], [1, 2, 3, 4, 5]])) // returns DenseMatrix [0.9569941688503644, 1]\n   *\n   * See also:\n   *\n   *     median, mean, min, max, sum, prod, std, variance\n   *\n   * @param {Array | Matrix} A The first array or matrix to compute correlation coefficient\n   * @param {Array | Matrix} B The second array or matrix to compute correlation coefficient\n   * @return {*} The correlation coefficient\n   */\n  return typed(name, {\n    'Array, Array': function ArrayArray(A, B) {\n      return _corr(A, B);\n    },\n    'Matrix, Matrix': function MatrixMatrix(xMatrix, yMatrix) {\n      return matrix(_corr(xMatrix.toArray(), yMatrix.toArray()));\n    }\n  });\n  /**\n   * Calculate the correlation coefficient between two arrays or matrices.\n   * @param {Array | Matrix} A\n   * @param {Array | Matrix} B\n   * @return {*} correlation coefficient\n   * @private\n   */\n  function _corr(A, B) {\n    if (Array.isArray(A[0]) && Array.isArray(B[0])) {\n      var correlations = [];\n      for (var i = 0; i < A.length; i++) {\n        correlations.push(correlation(A[i], B[i]));\n      }\n      return correlations;\n    } else {\n      return correlation(A, B);\n    }\n  }\n  function correlation(A, B) {\n    var n = A.length;\n    var sumX = sum(A);\n    var sumY = sum(B);\n    var sumXY = A.reduce((acc, x, index) => add(acc, multiply(x, B[index])), 0);\n    var sumXSquare = sum(A.map(x => pow(x, 2)));\n    var sumYSquare = sum(B.map(y => pow(y, 2)));\n    var numerator = subtract(multiply(n, sumXY), multiply(sumX, sumY));\n    var denominator = sqrt(multiply(subtract(multiply(n, sumXSquare), pow(sumX, 2)), subtract(multiply(n, sumYSquare), pow(sumY, 2))));\n    return divide(numerator, denominator);\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}